
FILE(GLOB SRCS *.cpp)
FILE(GLOB HDRS *.h)
IF (WIN32)
	IF (FTEDITOR_DEVICE_MANAGER)
		FILE(GLOB SRCSFT ftlib/*.cpp)
		FILE(GLOB HDRSFT ftlib/*.h)
	ENDIF (FTEDITOR_DEVICE_MANAGER)
	FILE(GLOB RSRC *.rc)
ENDIF (WIN32)
FILE(GLOB RESOURCES *.qrc)

SOURCE_GROUP("resources" FILES ${RESOURCES} ${RSRC})
SOURCE_GROUP("ftdi" FILES ${SRCSFT} ${HDRSFT})
SOURCE_GROUP("" FILES ${SRCS} ${HDRS})

# Find the QtWidgets library
FIND_PACKAGE(Qt5Widgets)

IF (POLICY CMP0071)
	CMAKE_POLICY(SET CMP0071 OLD)
ENDIF ()

# Instruct CMake to run moc automatically when needed.
SET(CMAKE_AUTOMOC ON)

QT5_ADD_RESOURCES(RESOURCE_ADDED ${RESOURCES})

ADD_EXECUTABLE(fteditor WIN32
	${SRCS}
	${HDRS}
	${SRCSFT}
	${HDRSFT}
	${RSRC}
	${RESOURCE_ADDED}
	)

TARGET_LINK_LIBRARIES(fteditor
	bt8xxemu
	)

IF (WITH_SDL2)
  ADD_DEFINITIONS(-DFT800EMU_SDL2)
ENDIF ()

IF (WITH_PYTHON)

  FIND_PACKAGE(PythonLibs REQUIRED)
  INCLUDE_DIRECTORIES(
    ${PYTHON_INCLUDE_DIRS}
    )
  TARGET_LINK_LIBRARIES(fteditor
    ${PYTHON_LIBRARIES}
    )

  ADD_DEFINITIONS(-DFT800EMU_PYTHON)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/export_gd2.py
    ${CMAKE_CURRENT_BINARY_DIR}/export_gd2.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/export_eve_arduino.py
    ${CMAKE_CURRENT_BINARY_DIR}/export_eve_arduino.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/export_ftdi_eve_hal.py
    ${CMAKE_CURRENT_BINARY_DIR}/export_ftdi_eve_hal.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/export_bt81x.py
    ${CMAKE_CURRENT_BINARY_DIR}/export_bt81x.py COPYONLY)
    
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/export_bt81x_helper.py
    ${CMAKE_CURRENT_BINARY_DIR}/export_bt81x_helper.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/img_cvt.py
    ${CMAKE_CURRENT_BINARY_DIR}/img_cvt.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/png.py
    ${CMAKE_CURRENT_BINARY_DIR}/png.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/pngp2pa.py
    ${CMAKE_CURRENT_BINARY_DIR}/pngp2pa.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/raw_cvt.py
    ${CMAKE_CURRENT_BINARY_DIR}/raw_cvt.py COPYONLY)

  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/astc_conv.py
    ${CMAKE_CURRENT_BINARY_DIR}/astc_conv.py COPYONLY)
    
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/helperapi.py
    ${CMAKE_CURRENT_BINARY_DIR}/helperapi.py COPYONLY)
   
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/astcenc.exe
    ${CMAKE_CURRENT_BINARY_DIR}/astcenc.exe COPYONLY)
    
  file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/EVE_Hal_Library DESTINATION  ${CMAKE_CURRENT_BINARY_DIR}/)
  file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/EVE_Hal_Library DESTINATION  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/)
  
ENDIF (WITH_PYTHON)

IF(WITH_FREETYPE)
  FIND_PACKAGE(Freetype REQUIRED)
  IF (WITH_FREETYPE_STATIC)
    FIND_PACKAGE(ZLIB REQUIRED) # Dependency of Freetype
    FIND_PACKAGE(PNG REQUIRED) # Dependency of Freetype
  ENDIF (WITH_FREETYPE_STATIC)
  INCLUDE_DIRECTORIES(
    ${FREETYPE_INCLUDE_DIRS}
    )
  TARGET_LINK_LIBRARIES(fteditor
    ${FREETYPE_LIBRARIES}
    )
  IF (WITH_FREETYPE_STATIC)
    TARGET_LINK_LIBRARIES(fteditor
      ${ZLIB_LIBRARIES}
      ${PNG_LIBRARIES}
    )
  ENDIF (WITH_FREETYPE_STATIC)

  ADD_DEFINITIONS(-DFT800EMU_FREETYPE)
ENDIF(WITH_FREETYPE)


IF (WIN32)
  TARGET_LINK_LIBRARIES(fteditor
    Qt5::Widgets
  )
  IF (FTEDITOR_DEVICE_MANAGER)
    TARGET_LINK_LIBRARIES(fteditor
      ${CMAKE_SOURCE_DIR}/fteditor/ftlib/ftd2xx.lib
      ${CMAKE_SOURCE_DIR}/fteditor/ftlib/libMPSSE.lib
      ${CMAKE_SOURCE_DIR}/fteditor/ftlib/LibFT4222.lib
    )
  ENDIF (FTEDITOR_DEVICE_MANAGER)
ELSE (WIN32)
  TARGET_LINK_LIBRARIES(fteditor
    Qt5::Widgets
  )
ENDIF (WIN32)

ADD_DEFINITIONS(-DFT800EMU_REFERENCE_DIR="${FT800_REFERENCE_DIR}")

